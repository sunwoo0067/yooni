#!/usr/bin/env python3
"""
쿠팡 파트너스 API - 통합 상품 클라이언트 (Facade 패턴)
기존 호환성을 유지하면서 분리된 클라이언트들을 통합
"""

from typing import Dict, Any, Optional
from .product_management_client import ProductManagementClient
from .product_query_client import ProductQueryClient
from .vendor_item_client import VendorItemClient
from .auto_generated_option_client import AutoGeneratedOptionClient
from .models import ProductRequest, ProductSearchParams, ProductPartialUpdateRequest, ProductStatusHistoryParams


class ProductClient:
    """쿠팡 상품 API 통합 클라이언트 (Facade 패턴)"""
    
    def __init__(self, access_key: Optional[str] = None, secret_key: Optional[str] = None, vendor_id: Optional[str] = None):
        """
        클라이언트 초기화
        
        Args:
            access_key: 쿠팡 액세스 키 (None이면 환경변수에서 읽음)
            secret_key: 쿠팡 시크릿 키 (None이면 환경변수에서 읽음)
            vendor_id: 쿠팡 벤더 ID (None이면 환경변수에서 읽음)
        """
        # 분리된 클라이언트들 초기화
        self.product_management = ProductManagementClient(access_key, secret_key, vendor_id)
        self.product_query = ProductQueryClient(access_key, secret_key, vendor_id)
        self.vendor_item = VendorItemClient(access_key, secret_key, vendor_id)
        self.auto_generated_option = AutoGeneratedOptionClient(access_key, secret_key, vendor_id)
        
        # 기존 호환성을 위한 속성들
        self.BASE_URL = self.product_management.BASE_URL
        self.auth = self.product_management.auth
    
    # =========================
    # 상품 관리 기능 (Product Management)
    # =========================
    
    def create_product(self, product_request: ProductRequest) -> Dict[str, Any]:
        """상품 등록"""
        return self.product_management.create_product(product_request)
    
    def get_product(self, seller_product_id: int) -> Dict[str, Any]:
        """상품 조회 (승인필요)"""
        return self.product_management.get_product(seller_product_id)
    
    def get_product_partial(self, seller_product_id: int) -> Dict[str, Any]:
        """상품 조회 (승인불필요)"""
        return self.product_management.get_product_partial(seller_product_id)
    
    def update_product(self, product_request: ProductRequest) -> Dict[str, Any]:
        """상품 수정 (승인필요)"""
        return self.product_management.update_product(product_request)
    
    def update_product_partial(self, partial_request: ProductPartialUpdateRequest) -> Dict[str, Any]:
        """상품 부분 수정 (승인불필요)"""
        return self.product_management.update_product_partial(partial_request)
    
    def request_product_approval(self, seller_product_id: int) -> Dict[str, Any]:
        """상품 승인 요청"""
        return self.product_management.request_product_approval(seller_product_id)
    
    def recommend_category(self, product_name: str) -> Dict[str, Any]:
        """카테고리 추천"""
        return self.product_management.recommend_category(product_name)
    
    # =========================
    # 상품 조회 기능 (Product Query)
    # =========================
    
    def get_inflow_status(self) -> Dict[str, Any]:
        """등록 상품 유입 현황 조회"""
        return self.product_query.get_inflow_status()
    
    def list_products(self, search_params: ProductSearchParams) -> Dict[str, Any]:
        """등록 상품 목록 조회"""
        return self.product_query.list_products(search_params)
    
    def get_products_by_time_frame(self, vendor_id: str, created_at_from: str, created_at_to: str) -> Dict[str, Any]:
        """등록일 기준 상품 목록 조회"""
        return self.product_query.get_products_by_time_frame(vendor_id, created_at_from, created_at_to)
    
    def get_product_status_history(self, history_params: ProductStatusHistoryParams) -> Dict[str, Any]:
        """상품 상태 변경 이력 조회"""
        return self.product_query.get_product_status_history(history_params)
    
    def get_product_by_external_sku(self, external_vendor_sku_code: str) -> Dict[str, Any]:
        """외부 벤더 SKU 코드로 상품 조회"""
        return self.product_query.get_product_by_external_sku(external_vendor_sku_code)
    
    # =========================
    # 벤더아이템 관리 기능 (Vendor Item Management)
    # =========================
    
    def get_vendor_item_inventory(self, vendor_item_id: int) -> Dict[str, Any]:
        """벤더아이템 재고 조회"""
        return self.vendor_item.get_vendor_item_inventory(vendor_item_id)
    
    def update_vendor_item_quantity(self, vendor_item_id: int, quantity: int) -> Dict[str, Any]:
        """벤더아이템 재고수량 변경"""
        return self.vendor_item.update_vendor_item_quantity(vendor_item_id, quantity)
    
    def update_vendor_item_price(self, vendor_item_id: int, price: int, force_sale_price_update: bool = False) -> Dict[str, Any]:
        """벤더아이템 가격 변경"""
        return self.vendor_item.update_vendor_item_price(vendor_item_id, price, force_sale_price_update)
    
    def resume_vendor_item_sales(self, vendor_item_id: int) -> Dict[str, Any]:
        """벤더아이템 판매 재개"""
        return self.vendor_item.resume_vendor_item_sales(vendor_item_id)
    
    def stop_vendor_item_sales(self, vendor_item_id: int) -> Dict[str, Any]:
        """벤더아이템 판매 중지"""
        return self.vendor_item.stop_vendor_item_sales(vendor_item_id)
    
    def update_vendor_item_original_price(self, vendor_item_id: int, original_price: int) -> Dict[str, Any]:
        """벤더아이템 할인율 기준가격 변경"""
        return self.vendor_item.update_vendor_item_original_price(vendor_item_id, original_price)
    
    # =========================
    # 자동생성옵션 기능 (Auto Generated Options)
    # =========================
    
    def enable_vendor_item_auto_generated_option(self, vendor_item_id: int) -> Dict[str, Any]:
        """개별 벤더아이템 자동생성옵션 활성화"""
        return self.auto_generated_option.enable_vendor_item_auto_generated_option(vendor_item_id)
    
    def disable_vendor_item_auto_generated_option(self, vendor_item_id: int) -> Dict[str, Any]:
        """개별 벤더아이템 자동생성옵션 비활성화"""
        return self.auto_generated_option.disable_vendor_item_auto_generated_option(vendor_item_id)
    
    def enable_seller_auto_generated_option(self) -> Dict[str, Any]:
        """전체 상품 자동생성옵션 활성화"""
        return self.auto_generated_option.enable_seller_auto_generated_option()
    
    def disable_seller_auto_generated_option(self) -> Dict[str, Any]:
        """전체 상품 자동생성옵션 비활성화"""
        return self.auto_generated_option.disable_seller_auto_generated_option()
    
    # =========================
    # 기존 호환성을 위한 내부 메서드
    # =========================
    
    def _make_request(self, method: str, path: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """기존 호환성을 위한 내부 API 요청 메서드"""
        return self.product_management._make_request(method, path, data)