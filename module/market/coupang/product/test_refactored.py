#!/usr/bin/env python3
"""
리팩토링된 쿠팡 상품 API 클라이언트 테스트
"""

import sys
import os

# 프로젝트 루트를 Python 경로에 추가
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..', '..')
sys.path.insert(0, project_root)

def test_import_compatibility():
    """기존 호환성 테스트"""
    print("🧪 기존 import 호환성 테스트...")
    
    try:
        # 기존 방식 import 테스트
        from market.coupang.product import ProductClient
        print("✅ ProductClient import 성공")
        
        # 새로운 분리된 클라이언트들 import 테스트
        from market.coupang.product import (
            ProductManagementClient,
            ProductQueryClient, 
            VendorItemClient,
            AutoGeneratedOptionClient
        )
        print("✅ 분리된 클라이언트들 import 성공")
        
        # 유틸리티 import 테스트
        from market.coupang.product import (
            setup_project_path,
            print_test_header,
            validate_environment_variables
        )
        print("✅ 공통 유틸리티 import 성공")
        
        return True
        
    except Exception as e:
        print(f"❌ Import 실패: {e}")
        return False


def test_client_initialization():
    """클라이언트 초기화 테스트"""
    print("\n🧪 클라이언트 초기화 테스트...")
    
    try:
        from market.coupang.product import ProductClient
        
        # 메인 클라이언트 초기화
        client = ProductClient()
        print("✅ ProductClient 초기화 성공")
        
        # 내부 클라이언트들 확인
        assert hasattr(client, 'product_management'), "product_management 속성이 없음"
        assert hasattr(client, 'product_query'), "product_query 속성이 없음"
        assert hasattr(client, 'vendor_item'), "vendor_item 속성이 없음"
        assert hasattr(client, 'auto_generated_option'), "auto_generated_option 속성이 없음"
        print("✅ 내부 클라이언트들 정상 초기화")
        
        # 기존 호환성 속성 확인
        assert hasattr(client, 'BASE_URL'), "BASE_URL 속성이 없음"
        assert hasattr(client, 'auth'), "auth 속성이 없음"
        print("✅ 기존 호환성 속성 확인")
        
        return True
        
    except Exception as e:
        print(f"❌ 클라이언트 초기화 실패: {e}")
        return False


def test_method_availability():
    """메서드 가용성 테스트"""
    print("\n🧪 메서드 가용성 테스트...")
    
    try:
        from market.coupang.product import ProductClient
        client = ProductClient()
        
        # 상품 관리 메서드들
        product_mgmt_methods = [
            'create_product', 'get_product', 'get_product_partial',
            'update_product', 'update_product_partial', 'request_product_approval',
            'recommend_category'
        ]
        
        for method_name in product_mgmt_methods:
            assert hasattr(client, method_name), f"{method_name} 메서드가 없음"
        print("✅ 상품 관리 메서드들 확인")
        
        # 상품 조회 메서드들
        query_methods = [
            'get_inflow_status', 'list_products', 'get_products_by_time_frame',
            'get_product_status_history', 'get_product_by_external_sku'
        ]
        
        for method_name in query_methods:
            assert hasattr(client, method_name), f"{method_name} 메서드가 없음"
        print("✅ 상품 조회 메서드들 확인")
        
        # 벤더아이템 관리 메서드들
        vendor_item_methods = [
            'get_vendor_item_inventory', 'update_vendor_item_quantity',
            'update_vendor_item_price', 'resume_vendor_item_sales',
            'stop_vendor_item_sales', 'update_vendor_item_original_price'
        ]
        
        for method_name in vendor_item_methods:
            assert hasattr(client, method_name), f"{method_name} 메서드가 없음"
        print("✅ 벤더아이템 관리 메서드들 확인")
        
        # 자동생성옵션 메서드들
        auto_gen_methods = [
            'enable_vendor_item_auto_generated_option',
            'disable_vendor_item_auto_generated_option',
            'enable_seller_auto_generated_option',
            'disable_seller_auto_generated_option'
        ]
        
        for method_name in auto_gen_methods:
            assert hasattr(client, method_name), f"{method_name} 메서드가 없음"
        print("✅ 자동생성옵션 메서드들 확인")
        
        # 기존 호환성 메서드
        assert hasattr(client, '_make_request'), "_make_request 메서드가 없음"
        print("✅ 기존 호환성 메서드 확인")
        
        return True
        
    except Exception as e:
        print(f"❌ 메서드 가용성 테스트 실패: {e}")
        return False


def test_separated_clients():
    """분리된 클라이언트들 개별 테스트"""
    print("\n🧪 분리된 클라이언트들 개별 테스트...")
    
    try:
        from market.coupang.product import (
            ProductManagementClient,
            ProductQueryClient,
            VendorItemClient,
            AutoGeneratedOptionClient
        )
        
        # 각 클라이언트 초기화
        mgmt_client = ProductManagementClient()
        query_client = ProductQueryClient()
        vendor_client = VendorItemClient()
        auto_client = AutoGeneratedOptionClient()
        
        print("✅ 모든 분리된 클라이언트 초기화 성공")
        
        # 각 클라이언트의 고유 메서드 확인
        assert hasattr(mgmt_client, 'create_product'), "create_product 메서드가 없음"
        assert hasattr(query_client, 'get_inflow_status'), "get_inflow_status 메서드가 없음"
        assert hasattr(vendor_client, 'update_vendor_item_quantity'), "update_vendor_item_quantity 메서드가 없음"
        assert hasattr(auto_client, 'enable_vendor_item_auto_generated_option'), "enable_vendor_item_auto_generated_option 메서드가 없음"
        
        print("✅ 각 클라이언트의 고유 메서드들 확인")
        
        return True
        
    except Exception as e:
        print(f"❌ 분리된 클라이언트 테스트 실패: {e}")
        return False


def test_utilities():
    """유틸리티 함수들 테스트"""
    print("\n🧪 유틸리티 함수들 테스트...")
    
    try:
        from market.coupang.product import (
            setup_project_path,
            format_api_response,
            handle_api_success,
            handle_api_error,
            print_test_header,
            validate_environment_variables
        )
        
        # 프로젝트 경로 설정 테스트
        setup_project_path()
        print("✅ setup_project_path 실행 성공")
        
        # API 응답 포맷팅 테스트
        success_response = format_api_response(
            success=True,
            data={"test": "data"},
            message="테스트 성공"
        )
        assert success_response["success"] == True
        assert success_response["data"]["test"] == "data"
        print("✅ format_api_response 성공 응답 테스트")
        
        error_response = format_api_response(
            success=False,
            error="테스트 오류",
            code="ERROR"
        )
        assert error_response["success"] == False
        assert error_response["error"] == "테스트 오류"
        print("✅ format_api_response 오류 응답 테스트")
        
        # 환경변수 검증 테스트
        result = validate_environment_variables("NONEXISTENT_VAR")
        assert result == False  # 존재하지 않는 환경변수이므로 False
        print("✅ validate_environment_variables 테스트")
        
        return True
        
    except Exception as e:
        print(f"❌ 유틸리티 테스트 실패: {e}")
        return False


def main():
    """메인 테스트 실행"""
    print("🚀 리팩토링된 쿠팡 상품 API 클라이언트 테스트 시작")
    print("=" * 80)
    
    tests = [
        ("Import 호환성", test_import_compatibility),
        ("클라이언트 초기화", test_client_initialization),
        ("메서드 가용성", test_method_availability),
        ("분리된 클라이언트들", test_separated_clients),
        ("유틸리티 함수들", test_utilities)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"📋 {test_name} 테스트")
        print(f"{'='*60}")
        
        try:
            if test_func():
                print(f"✅ {test_name} 테스트 통과")
                passed += 1
            else:
                print(f"❌ {test_name} 테스트 실패")
        except Exception as e:
            print(f"❌ {test_name} 테스트 중 예외 발생: {e}")
    
    print(f"\n{'='*80}")
    print(f"🎉 테스트 완료: {passed}/{total} 통과")
    print(f"{'='*80}")
    
    if passed == total:
        print("✅ 모든 테스트 통과! 리팩토링이 성공적으로 완료되었습니다.")
        
        print(f"\n💡 리팩토링 결과:")
        print("   🔧 레거시 파일 제거 완료")
        print("   📦 모듈화된 클라이언트 구조")
        print("   🛠️ 공통 유틸리티 제공")
        print("   🔄 기존 호환성 유지")
        print("   📈 코드 품질 개선")
        
    else:
        print("❌ 일부 테스트 실패. 리팩토링에 문제가 있을 수 있습니다.")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)