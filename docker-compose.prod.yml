version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - backend-monitoring
      - backend-workflow
      - backend-websocket
      - backend-ai
      - mlflow
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-yoonni}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Services
  backend-monitoring:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker monitoring_server:app --bind 0.0.0.0:8000
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  backend-websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker websocket_server:app --bind 0.0.0.0:8002
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  backend-workflow:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker workflow_api_server:app --bind 0.0.0.0:8001
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # AI/ML Services
  backend-ai:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn -w 2 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000 --timeout 300
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      PYTHONPATH: /app
      ENVIRONMENT: production
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mlflow_data:/app/mlruns
      - model_registry:/app/model_registry
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      MLFLOW_ARTIFACT_ROOT: /mlartifacts
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      --default-artifact-root /mlartifacts
      --host 0.0.0.0
      --port 5000
      --serve-artifacts
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - mlflow_artifacts:/mlartifacts
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
    restart: unless-stopped


  # Scheduled Jobs
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python scheduler.py
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-yoonni}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  mlflow_artifacts:
  model_registry:

networks:
  default:
    name: yoonni_network_prod