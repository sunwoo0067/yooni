name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/yoonni-backend
          ${{ secrets.DOCKER_USERNAME }}/yoonni-frontend
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/yoonni-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/yoonni-backend:buildcache,mode=max
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/yoonni-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/yoonni-frontend:buildcache,mode=max
    
    - name: Deploy to Kubernetes
      if: github.event.inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/')
      run: |
        echo "Deploying to Kubernetes cluster..."
        # kubectl apply -f k8s/
        # kubectl set image deployment/backend backend=${{ secrets.DOCKER_USERNAME }}/yoonni-backend:${{ steps.meta.outputs.version }}
        # kubectl set image deployment/frontend frontend=${{ secrets.DOCKER_USERNAME }}/yoonni-frontend:${{ steps.meta.outputs.version }}
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ### Backend
          - Docker image: `${{ secrets.DOCKER_USERNAME }}/yoonni-backend:${{ steps.meta.outputs.version }}`
          
          ### Frontend  
          - Docker image: `${{ secrets.DOCKER_USERNAME }}/yoonni-frontend:${{ steps.meta.outputs.version }}`
          
          ### Deployment
          - Environment: ${{ github.event.inputs.environment || 'production' }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false